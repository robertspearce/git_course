What happens when you initialize a repository? Why do you need to do it?
* An empty .git folder is created
* To set up your repository to accept commits.
How is the staging area different from the working directory and the repository? What value do you think it offers?
* Staging area contains files added from the working directory.
* It a bit like a working list in idea.
* Can add all files we have operated on, and commit them all at once.
* Staging area is on the local machine.

How can you use the staging area to make sure you have one commit per logical chage?
* Group all files made in a logical change in the staging area (as they are changed), and only need to commit when the change is complete.

What are some situations when branches would be helpful in keeping your hstory orgainzed? How would branches help.
* Have one branch per release of software. 
* Have one branch per feature. Can always go back to state of play before feature was added.
* When sharing code, different developers can change the same file - if they have different branches this does not matter any more.
* May want to have different branches with different features.
* Can fork software if you have a disagreement about how it should work.

How do the diagrams help you visualize the branch structure?
* Can see which commits belong with which branch.

What is the reult of merging two branches together? Why do we represent it in the diagram the way we do?
* Merging two branches puts all commits from one branch into another.
* This is shown in the diagram as two branches combining.
* On showing the log of a merged branch, the commits from both branches will be show.
